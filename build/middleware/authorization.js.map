{"version":3,"sources":["../../src/middleware/authorization.js"],"names":[],"mappings":"AAAA;;;;AACA,IAAM,gBAAgB,QAAQ,gBAAR,EAA0B,QAAhD;AACA,IAAM,SAAS,QAAQ,UAAR,CAAf;;AAEA,OAAO,OAAP,GAAiB,UAAU,GAAV,EAAe,QAAf,EAAyB,QAAzB,EAAmC;AAChD,QAAI,aAAa,SAAS,KAAT,CAAe,MAAf,CAAjB;AACA,QAAI,cAAc,SAAS,KAAT,CAAe,OAAf,CAAlB;AACA,aAAS,GAAT,CAAa,OAAb,EAAsB,IAAI,aAAJ;AAAA,4DAClB,iBAAgB,QAAhB,EAA0B,QAA1B,EAAoC,IAApC;AAAA,gBAGY,kBAHZ,EAOY,mBAPZ;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEQ,oCAAQ,GAAR,CAAY,SAAZ;AAFR;AAAA,mCAGuC,WAAW,OAAX,CAAmB,EAAC,UAAU,QAAX,EAAnB,EAAyC,IAAzC,EAHvC;;AAAA;AAGY,8CAHZ;;AAAA,kCAIY,CAAC,CAAC,kBAAF,IAAyB,OAAO,WAAP,CAAmB,QAAnB,EAA6B,mBAAmB,QAAhD,CAJrC;AAAA;AAAA;AAAA;;AAAA,6DAKmB,KAAK,IAAL,EAAW,kBAAX,CALnB;;AAAA;AAAA;AAAA,mCAOwC,YAAY,OAAZ,CAAoB,EAAC,UAAU,QAAX,EAApB,EAA0C,IAA1C,EAPxC;;AAAA;AAOY,+CAPZ;;AAAA,kCAQY,CAAC,CAAC,mBAAF,IAA0B,OAAO,WAAP,CAAmB,QAAnB,EAA6B,oBAAoB,QAAjD,CARtC;AAAA;AAAA;AAAA;;AAAA,6DASmB,KAAK,IAAL,EAAW,mBAAX,CATnB;;AAAA;AAAA,6DAWe,KAAK,IAAL,EAAW,KAAX,CAXf;;AAAA;AAAA;AAAA;AAAA,6DAae,iBAbf;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SADkB;;AAAA;AAAA;AAAA;AAAA,QAAtB;;AAmBA,aAAS,aAAT,CAAuB,UAAS,IAAT,EAAe,IAAf,EAAqB;AACxC,aAAK,IAAL,EAAW,KAAK,EAAhB;AACH,KAFD;;AAIA,aAAS,eAAT,CAAyB,UAAS,EAAT,EAAa,IAAb,EAAmB;AACxC,mBAAW,QAAX,CAAoB,EAApB,EAAwB,UAAS,GAAT,EAAc,IAAd,EAAoB;AACxC,iBAAK,GAAL,EAAU,IAAV;AACH,SAFD;AAGH,KAJD;AAKH,CA/BD","file":"authorization.js","sourceRoot":"src","sourcesContent":["'use strict';\r\nconst localStrategy = require('passport-local').Strategy;\r\nconst bcrypt = require('bcryptjs');\r\n\r\nmodule.exports = function (app, passport, mongoose) {\r\n    let test_model = mongoose.model('test');\r\n    let test_model2 = mongoose.model('test2');\r\n    passport.use('local', new localStrategy(\r\n        async function (username, password, done) {\r\n            try {\r\n                console.log('entered');\r\n                let foundIn_test_model = await test_model.findOne({username: username}).exec();\r\n                if (!!foundIn_test_model && (bcrypt.compareSync(password, foundIn_test_model.password))) {\r\n                    return done(null, foundIn_test_model)\r\n                }\r\n                let foundIn_test_model2 = await test_model2.findOne({username: username}).exec();\r\n                if (!!foundIn_test_model2 && (bcrypt.compareSync(password, foundIn_test_model2.password))) {\r\n                    return done(null, foundIn_test_model2)\r\n                }\r\n                return done(null, false)\r\n            } catch (error) {\r\n                return done(error);\r\n            }\r\n        }\r\n    ));\r\n\r\n    passport.serializeUser(function(user, done) {\r\n        done(null, user.id);\r\n    });\r\n\r\n    passport.deserializeUser(function(id, done) {\r\n        test_model.findById(id, function(err, user) {\r\n            done(err, user);\r\n        });\r\n    });\r\n};"]}